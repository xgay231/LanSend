#pragma once

#include "core/model/feedback.h"
#include <boost/asio.hpp>
#include <core/constant/transfer.h>
#include <core/model.h>
#include <core/network/client/http_client.h>
#include <core/security/certificate_manager.h>
#include <core/security/file_hasher.h>
#include <core/util/binary_message.h>
#include <string>
#include <unordered_map>

namespace lansend::core {

using SessionStartedCallback = std::function<void()>;
using SessionCleanupCallback = std::function<void()>;

class SendSession {
    friend class SendSessionManager;

public:
    SendSession(boost::asio::io_context& ioc,
                CertificateManager& cert_manager,
                FeedbackCallback callback = nullptr);
    ~SendSession() = default;

    SendSession(const SendSession&) = delete;
    SendSession& operator=(const SendSession&) = delete;

    SessionStatus session_status() const { return session_status_; }

    std::string session_id() const { return session_id_; }

    void RecordReceiverId(std::string_view receiver_id) { receiver_device_id_ = receiver_id; }

    void Cancel();

    bool IsCancelled() const;

    boost::asio::awaitable<void> Start(const std::vector<std::filesystem::path>& file_paths,
                                       std::string_view host,
                                       unsigned int port,
                                       SessionStartedCallback callback = nullptr);

private:
    boost::asio::awaitable<bool> requestSend(const RequestSendDto& dto);
    boost::asio::awaitable<void> sendFile(std::string_view file_id);
    boost::asio::awaitable<bool> sendChunk(const SendChunkDto& dto, const BinaryData& chunk_data);
    boost::asio::awaitable<bool> verifyIntegrity(const VerifyIntegrityDto& dto);
    boost::asio::awaitable<bool> cancelSend();

    std::vector<FileDto> prepareFiles(const std::vector<std::filesystem::path>& file_paths);

    boost::asio::io_context& ioc_;
    CertificateManager& cert_manager_;
    HttpsClient client_;

    std::unordered_map<std::string, TransferFileInfo> transfer_files_;
    SessionStatus session_status_ = SessionStatus::kIdle;

    std::string session_id_ = {};         // Generated by the server
    std::string receiver_device_id_ = {}; // The device ID of the receiver
    FeedbackCallback callback_ = nullptr;

    void feedback(Feedback&& feedback) {
        if (callback_) {
            callback_(std::move(feedback));
        }
    }
};

} // namespace lansend::core